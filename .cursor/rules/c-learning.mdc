---
description:
globs:
alwaysApply: false
---

我是零基础想学习 C 语言中的《XXX》，我想知道什么是《XXX》，目标完全掌握 《XXX》 的使用，请按下面格式给我内容，在项目创建对应的文件夹，并把下面内容输出到此文件下，让我达到熟练使用的水平。

注意：XXX 来自于用户输入关键词，举例：用户输入 变量，则为《变量》

1. 详细解释：

2. 常见问题：

3. 完整用法示例文件，需要带上完整注释：

4. 列出最少5道对应的练习题目，每道题每道题都需要包含结果验证的测试用例文件，后期可以通过执行测试用例，验证功能题目文件代码是否正确

- 要求1：每个题包含，开发者自行补充代码部分的文件
- 要求2：包含完整答案的文件
- 要求3：测试文件，验证开发者补充代码的测试用例文件
- 要求4：需要带上完整注释
- 要求5：相关文件要带上文件路径，方便开发者，按次结构，保存示 答案文件、示例文件、测试用例文件。例如：
  
相关源码文件路径格式示例：

- C_Tutorial/<关键词英语名称>/关键词英语名称_demo.c // 完整用法示例
- C_Tutorial/<关键词英语名称>/exercises/<关键词英语名称>_problem1_solution.c // 自行补充部分
- C_Tutorial/<关键词英语名称>/exercises/<关键词英语名称>_problem1_answer.c // 答案
- C_Tutorial/<关键词英语名称>/exercises/<关键词英语名称>_problem1_test.c // 测试验证文件
- problem1 表示练习1
- 每行代码需要带上完整注释说明
- 要求：problem1_answer 一定要使用弱函数功能， __attribute__((weak)) xx，当用户_problem1_solution.c 还没实现时，先使用 problem1_answer.c 测试练习标准答案 验证 problem1_test.c 是否正确。
- solution.c 用户写的代码函数，在测试用例文件 problem1_test.c 使用，检查起打印或者返回结果。
- 特别注意：测试用例文件一定要打印有输出对应运行方法如:
- 一定要包含每个测试用例编译和执行说明文档。

5. 需要生成包含 《XXX学习总结》的 markdown 文档。
6. 使用 gcc 编译输出到 xxx.out 文件中，注意一定要带上 .out 后缀

```bash
printf("编译和运行: gcc for_loop_problem1_solution.c for_loop_problem1_answer.c for_loop_problem1_test.c -o test1.out && ./test1.out\n");
```

以询问 《for循环》使用为例，示例代码，后面按示例代码结构来创建相关代码。

1. 完整示例文件：`C_Tutorial/for_loop/for_loop_demo.c`

```c
// 引入标准输入输出库，这样我们才能使用 printf 函数
#include <stdio.h>

// main 函数是每个 C 程序的入口点
int main() {
    // 打印一条消息，告诉用户程序即将开始
    printf("--- for 循环基本演示 ---\n");

    // 使用 for 循环打印从 1 到 5 的数字
    // for (初始化; 条件判断; 更新)
    // 1. 初始化: 定义一个整型变量 i 并赋值为 1。这只在循环开始前执行一次。
    // 2. 条件判断: 每次循环开始前，检查 i 是否小于或等于 5。
    // 3. 更新: 每次循环体执行完毕后，将 i 的值增加 1 (i++)。
    for (int i = 1; i <= 5; i++) {
        // 这是循环体，只要条件为真，这里的代码就会被执行
        // 使用 printf 打印当前循环变量 i 的值
        // %d 是一个占位符，表示这里要输出一个十进制整数
        // \n 是一个换行符，让每次输出都占据新的一行
        printf("当前数字是: %d\n", i);
    }

    // 打印一条消息，表示第一个循环已经结束
    printf("\n--- for 循环反向演示 ---\n");

    // 使用 for 循环打印从 3 到 1 的倒数
    // 1. 初始化: 定义变量 j 并赋值为 3。
    // 2. 条件判断: 检查 j 是否大于或等于 1。
    // 3. 更新: 每次循环后，将 j 的值减少 1 (j--)。
    for (int j = 3; j >= 1; j--) {
        // 打印倒数计时的当前值
        printf("倒计时: %d\n", j);
    }
    
    // 打印最终消息
    printf("发射！\n");

    // main 函数返回 0，表示程序成功执行并正常退出
    return 0;
}
```

2. 练习 1：计算从1到N的和

用户自测文件路径：`C_Tutorial/for_loop/exercises/for_loop_problem1_solution.c`

```c
// 引入标准库头文件
#include <stdio.h>

// 需求: 编写一个函数，接收一个整数 n，计算并返回从 1 到 n 所有整数的和。
// 例如，如果 n 是 5，函数应返回 1 + 2 + 3 + 4 + 5 = 15。

// 特别注意：请先请移除下面代码注释，才能进行：
// 默认情况下注释掉相关函数

// int sum_up_to_n(int n) {
//     // TODO 使用 for 循环从 1 遍历到 n
//     // 把你的代码写在这里
// }

```

标准答案路径：`C_Tutorial/for_loop/exercises/for_loop_problem1_answer.c`

```c
// 引入标准库头文件
#include <stdio.h>

// 需求: 编写一个函数，接收一个整数 n，计算并返回从 1 到 n 所有整数的和。
// 例如，如果 n 是 5，函数应返回 1 + 2 + 3 + 4 + 5 = 15。

// 标准答案函数，用于测试时提供预期结果
int sum_up_to_n_answer(int n) {
    // 定义一个变量用于累加和，并初始化为 0
    int sum = 0;

    // 使用 for 循环从 1 遍历到 n
    // 初始化循环变量 i 为 1
    // 循环条件是 i 小于或等于 n
    // 每次循环后 i 增加 1
    for (int i = 1; i <= n; i++) {
        // 在循环体中，将当前的 i 值累加到 sum 变量上
        sum = sum + i; // 也可以写成 sum += i;
    }

    // 循环结束后，返回计算出的总和
    return sum;
}

// 将这个函数定义为"弱"函数，用于回退机制。
// 当用户solution文件中没有实现sum_up_to_n时，使用这个函数
int __attribute__((weak)) sum_up_to_n(int n) {
    return sum_up_to_n_answer(n);
}

```

测试文件路径：`C_Tutorial/for_loop/exercises/for_loop_problem1_test.c`

```c
// 引入标准库头文件
#include <stdio.h>

// --- 函数声明 ---
// 声明用户需要实现的函数
int sum_up_to_n(int n);
// 声明标准答案函数，用于获取“预期”结果
int sum_up_to_n_answer(int n);

// 一定要有测试函数，用于对比，用户实现和标准答案是否一致。
// 定义一个辅助函数，用于运行单个测试用例
void run_test(int test_num, int input_n, int expected_sum) {
    // 调用你编写的函数来获取实际的计算结果
    int actual_sum = sum_up_to_n(input_n);

    // 比较实际结果和预期结果
    if (actual_sum == expected_sum) {
        // 如果结果相同，打印通过信息
        printf("✅ 测试用例 %d 通过\n", test_num);
    } else {
        // 如果结果不同，打印失败信息，并显示相关数据
        printf("❌ 测试用例 %d 失败: 输入 %d, 预期 %d, 得到 %d\n", test_num, input_n, expected_sum, actual_sum);
    }
}

// 测试主程序
int main() {
    // 打印测试标题
    printf("--- 开始测试：练习1 (计算1到N的和) ---\n");
    
    // 运行一系列测试用例
    run_test(1, 5, sum_up_to_n_answer(5));      // 测试 1+2+3+4+5
    run_test(2, 10, sum_up_to_n_answer(10));     // 测试 1 到 10 的和
    run_test(3, 1, sum_up_to_n_answer(1));       // 测试边界情况 n=1
    run_test(4, 0, sum_up_to_n_answer(0));       // 测试边界情况 n=0

    // 打印测试结束信息和如何运行的指令
    printf("\n--- 测试完成 ---\n");
    printf("编译和运行: gcc for_loop_problem1_solution.c for_loop_problem1_answer.c for_loop_problem1_test.c -o test1.out && ./test1.out\n");

    // 程序正常退出
    return 0;
}
```
